/*
像php一样去编译
src: 源文件
dest:目标文件(若不存在,则生成新文件)
dataPath: 数据所在路径
dataName: html中替换对象名, 若没设置ee,默认是dataPath文件名
delimiter: 定界符, 默认是<%%>, 传入的定界符必须是对称的
注意: <%=%>中传入的变量不允许加分号,  <%%>中的js语句必需加分号
*/
function rtt(src, dest, dataPath, dataName, delimiter){
	//读取数据
	var fs = require('fs');

	if( dataPath ){
		if( typeof dataPath === "string" ){
			//得到对象名字, 默认使用文件名, 在模板中使用时就用这个名字的对象
			dataName = dataName || dataPath.split('/').pop().replace(/\.[a-z0-9]+$/gi, ''); 
			eval("var "+dataName+" = " + trim(fs.readFileSync(dataPath).toString('utf-8')));
		}
		else if( dataPath instanceof Array ){
			for(var i=0, m=dataPath.length; i<m; i++){
				dataName = dataPath[i].split('/').pop().replace(/\.[a-z0-9]+$/gi, '');
				eval("var "+ dataName + " =" + trim(fs.readFileSync(dataPath[i]).toString('utf-8')) );
			}
		}
	}


	delimiter = delimiter || '<%%>';
	delimiter = (function(){
		var n = Math.floor(delimiter.length/2);
		return [delimiter.substr(0, n), delimiter.substr(-n)];
	})();

	fs.writeFileSync(dest, replace(src));

	console.log('compile finished!')

	function replace(src){

		var s = "res='';",
			fs = require("fs"),
			location = getLocation(src);

		//读取源文件html, 并得到字符串, 然后将字符串中的\r\n\t
		var srcHtml = fs.readFileSync(src).toString('utf-8').replace(/[\r\n\t]+/g, '');

		//去掉html注释, js注释/**/类型
		srcHtml = srcHtml.replace(/<!--.*?-->|\/\*.*?\*\//g, '');

		//分割html文件中的字符串
		var reg = new RegExp(delimiter[0] + "={0,2}.*?"+delimiter[1]+"|.*?(?="+delimiter[0]+")|.*?(?=$)", "g");
		var arr = srcHtml.match(reg);

		for(var i=0, m=arr.length; i<m; i++){
			if(arr[i].indexOf('<%') === 0){

				if(arr[i].charAt(2)==='=' && arr[i].charAt(3) !== '=' ){
					//js变量的时候
					s += 'res+=' + trimDelimiter(arr[i]) + ';';
				}
				else if(arr[i].charAt(2)==='=' && arr[i].charAt(3) === '='){
					//js变量的时候
					s += 'res+=' + esHtml(trimDelimiter(arr[i])) + ';';
				}
				else if(/^<%\s*include\(.*\)\s*;?\s*%>$/.test(arr[i])){
					//如果识别到是include('abc.html')类型格式, 则递归调用replace函数, 传入abc.html
					var newPath = genPath(src, arr[i].replace(/.+['"](.+)['"].+/g, function(a, b){ return b; }));
					s += 'res+="' + es(replace( newPath )) + '";';
				}
				else{
					//js语句的时候
					s += trimDelimiter(arr[i]);
				}
			}
			else{
				s += 'res+="' + es(arr[i]) + '";';
			}

		}
		eval(s);

		//返回eval得到的变量res
		return res;		
	}

	//去掉形如<%...%>中的定界符
	function trimDelimiter(str){
		return str.replace(/^\s*<%={0,2}\s*|\s*%>\s*$/g, '');
	}
	function trim(str){
		return str.replace(/^\s+|\s+$/g, '');
	}

	//转义"
	function es(str){
		return str.replace(/"/g, '\\"');
	}

	//替换html中的< 和 >
	function esHtml(str){
		str = str.replace(/<+/g, '&lt;');
		return str.replace(/>+/g, '&gt;');
	}

	//传入一个文件路径,返回其所在目录
	function getLocation(src){
		if(src.charAt(src.length-1) === '/') return src;
		else if(src.indexOf('/') === 0) return './';
		else if(src.indexOf('/') < 0) return './';
		else{
			var temp = src.split('/');
			temp.pop();
			return temp.join('/')+'/';
		}
	}
	
	//传入当前文件路径, 和include的文件路径, 生成相对于index的相对路径
	function genPath(cur, dest){
		if(dest.charAt(0) !== '.' && dest.charAt(0) !== '/'){
			return getLocation(cur) + dest.replace(/^\//, '');
		}
		else if(dest.indexOf('./') === 0){
			return getLocation(cur) + dest.replace(/^\.\//, '');
		}
		else{
			//如果目标路径是 ../../../a/b/c.html类型
			var cur = getLocation(cur).match(/[^\/]+\//g);
			var m = cur.length;
			var n = dest.match(/\.\.\//g).length;
			if(m>n){
				return cur.slice(0, m-n).join('') + dest.replace(/\.\.\//g, '');
			}
			else if(m === n) return './' + dest.replace(/\.\.\//g, '');
			else if(m < n){
				for(var res='', i=0; i<n-m; i++) res+='../';
				return res + dest.replace(/\.\.\//g, '');
			}
		}
	}

	function include(str){
		return replace(str);
	}
}


module.exports = rtt;
