/*
像php一样去编译
src: 源文件
dest:目标文件(若不存在,则生成新文件)
dataPath: 数据所在路径
dataName: html中替换对象名, 若没设置,默认是dataPath文件名
delimiter: 定界符, 默认是<%%>
*/

function compile(src, dest, dataPath, dataName, delimiter){
	//得到对象名字, 默认使用文件名, 在模板中使用时就用这个名字的对象
	dataName = dataName || dataPath.split('/')[dataPath.split('/').length-1].replace(/\.[a-z0-9]+$/gi, '');
	delimiter = delimiter || '<%%>';
	delimiter = (function(){
		var n = Math.floor(delimiter.length/2);
		return [delimiter.substr(0, n), delimiter.substr(-n)];
	})();

	var fs = require("fs");

	//读取数据
	var data = dataPath ? fs.readFileSync(dataPath).toString('utf-8') : {};

	eval("var "+dataName+" =" + data);

	//读取源文件html, 并得到字符串, 然后将字符串中的\r\n\t
	var srcHtml = fs.readFileSync(src).toString('utf-8').replace(/[\r\n\t]+/g, '');

	//去掉html注释, js注释/**/类型
	srcHtml = srcHtml.replace(/<!--.*?-->|\/\*.*?\*\//g, '');

	//分割html文件中的字符串
	//var arr = srcHtml.match(/<%=?.*?%>|[^<]+|.*?<[^%].+?(?=<%|$)/g);
	var reg = new RegExp(delimiter[0] + "={0,2}.*?"+delimiter[1]+"|.*?(?="+delimiter[0]+")|.*?(?=$)", "g");
	var arr = srcHtml.match(reg);



	// console.log(arr)


	var s = "res='';";		//用于eval的字符串

	for(var i=0, m=arr.length; i<m; i++){
		if(arr[i].indexOf('<%') === 0){

			if(arr[i].charAt(2)==='=' && arr[i].charAt(3) !== '=' ){
				//js变量的时候
				s += 'res+=' + trim(arr[i]) + ';';
			}
			else if(arr[i].charAt(2)==='=' && arr[i].charAt(3) === '='){
				//js变量的时候
				s += 'res+=' + esHtml(trim(arr[i])) + ';';
			}
			else{
				//js语句的时候
				s += trim(arr[i]);
			}
		}
		else{
			s += 'res+="' + es(arr[i]) + '";';
		}

	}

	function trim(str){
		return str.replace(/^\s*<%={0,2}\s*|\s*%>\s*$/g, '');
	}
	function es(str){
		return str.replace(/"/g, '\\"');
	}
	function esHtml(str){
		str = str.replace(/<+/g, '&lt;');
		return str.replace(/>+/g, '&gt;');
	}

	eval(s);

	//将eval出来的新变量写入到目标文件中
	fs.writeFileSync(dest, res)

	console.log('compile finished');
	
}

module.exports = compile;
